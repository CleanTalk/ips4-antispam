<?xml version="1.0" encoding="UTF-8"?>
<plugin name="CleanTalk Spam protect" version_long="19500" version_human="1.9.5" author="CleanTalk" website="https://cleantalk.org" update_check=""><hooks><hook type="C" class="\IPS\Member" filename="registration"><![CDATA[//<?php

			class hook13 extends _HOOK_CLASS_{
				
				public function getCheckJSArray(){
					try{
						
						$result=Array();
						
						for($i=-5;$i<=1;$i++){
							$result[]=md5(\IPS\Settings::i()->ct_access_key . '+' . \IPS\Settings::i()->email_in . date("Ymd",time()+86400*$i));
						}
						
						return $result;
					}
					catch ( \RuntimeException $e ){
						
						if ( method_exists( get_parent_class(), __FUNCTION__ ) )
							return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
						else
							throw $e;
					}
				}
			    public function ctCookiesTest()
			    {   
			        if(isset($_COOKIE['ct_cookies_test'])){
			            
			            $cookie_test = json_decode(stripslashes($_COOKIE['ct_cookies_test']), true);
			            
			            $check_srting = trim(\IPS\Settings::i()->ct_access_key);
			            foreach($cookie_test['cookies_names'] as $cookie_name){
			                $check_srting .= isset($_COOKIE[$cookie_name]) ? $_COOKIE[$cookie_name] : '';
			            } unset($cokie_name);
			            
			            if($cookie_test['check_value'] == md5($check_srting)){
			                return 1;
			            }else{
			                return 0;
			            }
			        }else{
			            return null;
			        }
			    }
				/**
				 * [ActiveRecord] Save Changed Columns
				 *
				 * @return	void
				 * @note	We have to be careful when upgrading in case we are coming from an older version
				 */
				public function save(){
					
					try{
						
						$new		= $this->_new;
						$enabled=\IPS\Settings::i()->ct_plugin_enabled;
						$ct_access_key=\IPS\Settings::i()->ct_access_key;
						if($enabled==1&&$new){
							
							require_once(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk.class.php");
							
							
					
							$post_info = '';
							$lang=\IPS\Lang::getEnabledLanguages();
							$locale=$lang[\IPS\Lang::defaultLanguage()]->short;
							
							// Pointer data
							$pointer_data = (isset($_COOKIE['ct_pointer_data']) ? json_decode ($_COOKIE['ct_pointer_data']) : 0);				
							// Timezone from JS
							$js_timezone = 	(isset($_COOKIE['ct_timezone']) ? $_COOKIE['ct_timezone'] : 0);
							//First key down timestamp
							$first_key_press_timestamp = isset($_COOKIE['ct_fkp_timestamp']) ? $_COOKIE['ct_fkp_timestamp'] : 0;
							// Page opened timestamp
							$page_set_timestamp = (isset($_COOKIE['ct_ps_timestamp']) ? $_COOKIE['ct_ps_timestamp'] : 0);
							
							if(function_exists('json_encode')){					
								$arr = array(
									'cms_lang' => $locale,
									'REFFERRER' => $_SERVER['HTTP_REFERER'],
									'USER_AGENT' => $_SERVER['HTTP_USER_AGENT'],
									'mouse_cursor_positions' => $pointer_data,
									'js_timezone' => $js_timezone,
									'key_press_timestamp' => $first_key_press_timestamp,
									'page_set_timestamp' => $page_set_timestamp,
									'REFFERRER_PREVIOUS' => isset($_COOKIE['ct_prev_referer'])?$_COOKIE['ct_prev_referer']:null,
									'cookies_enabled' => self::ctCookiesTest(),
								);
								$post_info = json_encode($arr);
							}
							if($post_info === FALSE)
								$post_info = '';
						
					
							$config_key = $ct_access_key;
							
							$ct = new \Cleantalk();
							$ct->server_url = \IPS\Settings::i()->ct_server_url;
							$ct->work_url = \IPS\Settings::i()->ct_work_url;
							$ct->server_ttl = \IPS\Settings::i()->ct_server_ttl;
							$ct->server_changed = \IPS\Settings::i()->ct_server_changed;

					
							$sender_email = filter_var($_POST['email_address'], FILTER_SANITIZE_EMAIL);
							$sender_ip = $ct->cleantalk_get_real_ip();
					
							$ct_request = new \CleantalkRequest();
							$ct_request->auth_key = $config_key;
							$ct_request->sender_nickname = $_POST['username'];
							$ct_request->sender_ip = $sender_ip;
							$ct_request->sender_email = $sender_email;
							$ct_request->sender_info = $post_info;
							$ct_request->agent = 'ipboard4-195';
							//$ct_request->js_on = $_COOKIE['ct_checkjs'] == md5(\IPS\Settings::i()->ct_access_key . '+' . \IPS\Settings::i()->email_in) ? 1 : 0;
							$ct_request->js_on = in_array($_COOKIE['ct_checkjs'], self::getCheckJSArray()) ? 1 : 0;
							$ct_request->submit_time = isset($_COOKIE['ct_ps_timestamp']) ? time() - intval($_COOKIE['ct_ps_timestamp']) : 0;
							$ct_result = $ct->isAllowUser($ct_request);
							if ($ct->server_change)
							{
								\IPS\Settings::i()->ct_work_url = $ct->work_url;
								\IPS\Settings::i()->ct_server_ttl = $ct->server_ttl;
								\IPS\Settings::i()->ct_server_changed = time();
							}							
							if ($ct_result && isset($ct_result->errno) && $ct_result->errno == 0)
							{
								if(isset($ct_result->errno) && $ct_result->errno>0){
									//sendErrorMessage("CleanTalk has some problems, errno is ".$ct_result->errno.", errstr is '".$ct_result->errstr."'")
								}
								
								if($ct_result->allow == 1)
									call_user_func_array( 'parent::save', func_get_args() );
								else{
									// Spammer - display message and exit.
									
									if ( \IPS\Request::i()->isAjax() ){
										$err_str = '<span style="color:#ab1f39;">' . $ct_result->comment . '</span><script>setTimeout("history.back()", 8000);</script>';
										print $err_str;
									}else{
										\IPS\Output::i()->sidebar['enabled'] = FALSE;
										\IPS\Output::i()->sendOutput(
											\IPS\Theme::i()->getTemplate( 'global', 'core' )->globalTemplate(
												"Forbidden",
													\IPS\Output::i()->error( $ct_result->comment, 'CleanTalk Spam protect', 1,""),
												array( 
													'app' => \IPS\Dispatcher::i()->application ? \IPS\Dispatcher::i()->application->directory : NULL,
													'module' => \IPS\Dispatcher::i()->module ? \IPS\Dispatcher::i()->module->key : NULL,
													'controller' => \IPS\Dispatcher::i()->controller 
												) 
											), 
											200, 
											'text/html', 
											Array(),
											FALSE,
											FALSE 
										);
									}
									die();
								}								
							}
						}
						return call_user_func_array( 'parent::save', func_get_args() );
					}
					catch ( \RuntimeException $e ){
						
						if ( method_exists( get_parent_class(), __FUNCTION__ ) )
							return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
						else
							throw $e;
					}
				}

			}]]></hook><hook type="C" class="\IPS\Output" filename="sfw_js"><![CDATA[//<?php

			class hook14 extends _HOOK_CLASS_{
				
				public function getTitle( $title ){
					
					try{
						
						if(\IPS\Settings::i()->ct_cleantalk_sfw == 1 && file_exists(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk-sfw.class.php") && \IPS\Db::i()->checkForTable('ct_cleantalk_sfw')){
							
							$is_sfw_check=true;
							$ip=$this->CleantalkGetIP();
							$ip=array_unique($ip);
							$key=\IPS\Settings::i()->ct_access_key;
							for($i=0;$i<sizeof($ip);$i++){
								
								if(isset($_COOKIE['ct_sfw_pass_key']) && $_COOKIE['ct_sfw_pass_key']==md5($ip[$i].$key)){
									
									$is_sfw_check=false;
									
									if(isset($_COOKIE['ct_sfw_passed']))
										@setcookie ('ct_sfw_passed', '0', 1, "/");
								}
							}
							if($is_sfw_check){
								
								include_once(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk-sfw.class.php");
								$sfw = new \CleanTalkSFW();
								$sfw->cleantalk_get_real_ip();
								$sfw->check_ip();
								if($sfw->result)
									$sfw->sfw_die();
							}
						}
						
						
						$ct_show_link=\IPS\Settings::i()->ct_show_link;
						$html = '
							<script type="text/javascript">
								function ctSetCookie(c_name, value) {
									document.cookie = c_name + "=" + encodeURIComponent(value) + "; path=/";
								}

								ctSetCookie("ct_ps_timestamp", Math.floor(new Date().getTime()/1000));
								ctSetCookie("ct_fkp_timestamp", "0");
								ctSetCookie("ct_pointer_data", "0");
								ctSetCookie("ct_timezone", "0");

								setTimeout(function(){
									ctSetCookie("ct_checkjs", "%s");
									ctSetCookie("ct_timezone", d.getTimezoneOffset()/60*(-1));
								},1000);

								//Stop observing function
								function ctMouseStopData(){
									if(typeof window.addEventListener == "function")
										window.removeEventListener("mousemove", ctFunctionMouseMove);
									else
										window.detachEvent("onmousemove", ctFunctionMouseMove);
									clearInterval(ctMouseReadInterval);
									clearInterval(ctMouseWriteDataInterval);				
								}

								//Stop key listening function
								function ctKeyStopStopListening(){
									if(typeof window.addEventListener == "function"){
										window.removeEventListener("mousedown", ctFunctionFirstKey);
										window.removeEventListener("keydown", ctFunctionFirstKey);
									}else{
										window.detachEvent("mousedown", ctFunctionFirstKey);
										window.detachEvent("keydown", ctFunctionFirstKey);
									}
									clearInterval(ctMouseReadInterval);
									clearInterval(ctMouseWriteDataInterval);				
								}

								var d = new Date(), 
									ctTimeMs = new Date().getTime(),
									ctMouseEventTimerFlag = true, //Reading interval flag
									ctMouseData = "[",
									ctMouseDataCounter = 0;
									
								//Reading interval
								var ctMouseReadInterval = setInterval(function(){
										ctMouseEventTimerFlag = true;
									}, 300);
									
								//Writting interval
								var ctMouseWriteDataInterval = setInterval(function(){ 
										var ctMouseDataToSend = ctMouseData.slice(0,-1).concat("]");
										ctSetCookie("ct_pointer_data", ctMouseDataToSend);
									}, 1200);

								//Logging mouse position each 300 ms
								var ctFunctionMouseMove = function output(event){
									if(ctMouseEventTimerFlag == true){
										var mouseDate = new Date();
										ctMouseData += "[" + event.pageY + "," + event.pageX + "," + (mouseDate.getTime() - ctTimeMs) + "],";
										ctMouseDataCounter++;
										ctMouseEventTimerFlag = false;
										if(ctMouseDataCounter >= 100)
											ctMouseStopData();
									}
								}
								//Writing first key press timestamp
								var ctFunctionFirstKey = function output(event){
									var KeyTimestamp = Math.floor(new Date().getTime()/1000);
									ctSetCookie("ct_fkp_timestamp", KeyTimestamp);
									ctKeyStopStopListening();
								}

								if(typeof window.addEventListener == "function"){
									window.addEventListener("mousemove", ctFunctionMouseMove);
									window.addEventListener("mousedown", ctFunctionFirstKey);
									window.addEventListener("keydown", ctFunctionFirstKey);
								}else{
									window.attachEvent("onmousemove", ctFunctionMouseMove);
									window.attachEvent("mousedown", ctFunctionFirstKey);
									window.attachEvent("keydown", ctFunctionFirstKey);
								}
							</script>';
						$ct_checkjs_key = md5(\IPS\Settings::i()->ct_access_key . '+' . \IPS\Settings::i()->email_in . date("Ymd",time()));
						$html = sprintf($html, $ct_checkjs_key);
						if($ct_show_link==1 && \IPS\Settings::i()->ct_plugin_enabled)
							$html.="<div id='cleantalk_footer_link' style='width:100%;text-align:center;'><a href='https://cleantalk.org/ips-cs-4-anti-spam-plugin'>IPS spam</a> blocked by CleanTalk.</div>";
						$this->setCookie();
						$this->endBodyCode.=$html;
						return $title;
					}
					catch ( \RuntimeException $e ){
						
						if ( method_exists( get_parent_class(), __FUNCTION__ ) )
							return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
						else
							throw $e;
					}
				}
			    public function setCookie()
			    {
			        // Cookie names to validate
			        $cookie_test_value = array(
			            'cookies_names' => array(),
			            'check_value' => trim(\IPS\Settings::i()->ct_access_key),
			        );
			        // Pervious referer
			        if(!empty($_SERVER['HTTP_REFERER'])){
			            setcookie('ct_prev_referer', $_SERVER['HTTP_REFERER'], 0, '/');
			            $cookie_test_value['cookies_names'][] = 'ct_prev_referer';
			            $cookie_test_value['check_value'] .= $_SERVER['HTTP_REFERER'];
			        }           

			        // Cookies test
			        $cookie_test_value['check_value'] = md5($cookie_test_value['check_value']);
			        setcookie('ct_cookies_test', json_encode($cookie_test_value), 0, '/');
			    }				
				public function CleantalkGetIP(){
					try{
						$result=Array();
						
						if ( function_exists( 'apache_request_headers' ) )
							$headers = apache_request_headers();
						else
							$headers = $_SERVER;

						if ( array_key_exists( 'X-Forwarded-For', $headers ) ){
							$the_ip=explode(",", trim($headers['X-Forwarded-For']));
							$result[] = trim($the_ip[0]);
						}
						
						if ( array_key_exists( 'HTTP_X_FORWARDED_FOR', $headers )){
							$the_ip=explode(",", trim($headers['HTTP_X_FORWARDED_FOR']));
							$result[] = trim($the_ip[0]);
						}
						
						$result[] = filter_var( $_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 );
					
						if(isset($_GET['sfw_test_ip']))
							$result[]=$_GET['sfw_test_ip'];
						
						return $result;
					}
					catch ( \RuntimeException $e ){			
						if ( method_exists( get_parent_class(), __FUNCTION__ ) )
							return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
						else
							throw $e;
					}
				}
			}]]></hook><hook type="C" class="\IPS\Content\Comment" filename="comment"><![CDATA[//<?php

			abstract class hook15 extends _HOOK_CLASS_{
				
				public static function create( $item, $comment, $first=FALSE, $guestName=NULL, $incrementPostCount=NULL, $member=NULL, \IPS\DateTime $time=NULL ){
					
					try{
						
						$topic=$item;
						
						if ( $member === NULL )
							$member = \IPS\Member::loggedIn();
						
						$comment_to_check = isset($_POST['topic_title']) ? $_POST['topic_title']."\n".trim(strip_tags($comment)) : trim(strip_tags($comment));
						
						$ct_access_key=\IPS\Settings::i()->ct_access_key;
						if(isset($member) && !$member->isAdmin() && $member->member_posts <= \IPS\Settings::i()->ct_posts_to_check && \IPS\Settings::i()->ct_moderate_new==1){
							
							require_once(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk.class.php");
						
					
							$post_info = '';
							$lang=\IPS\Lang::getEnabledLanguages();
							$locale=$lang[\IPS\Lang::defaultLanguage()]->short;
							
							// Pointer data
							$pointer_data = (isset($_COOKIE['ct_pointer_data']) ? json_decode ($_COOKIE['ct_pointer_data']) : 0);				
							// Timezone from JS
							$js_timezone = 	(isset($_COOKIE['ct_timezone']) ? $_COOKIE['ct_timezone'] : 0);
							//First key down timestamp
							$first_key_press_timestamp = isset($_COOKIE['ct_fkp_timestamp']) ? $_COOKIE['ct_fkp_timestamp'] : 0;
							// Page opened timestamp
							$page_set_timestamp = (isset($_COOKIE['ct_ps_timestamp']) ? $_COOKIE['ct_ps_timestamp'] : 0);
											
							if(function_exists('json_encode')){
								
								$arr = array(
									'cms_lang' => $locale,
									'REFFERRER' => $_SERVER['HTTP_REFERER'],
									'USER_AGENT' => $_SERVER['HTTP_USER_AGENT'],
									'mouse_cursor_positions' => $pointer_data,
									'js_timezone' => $js_timezone,
									'key_press_timestamp' => $first_key_press_timestamp,
									'page_set_timestamp' => $page_set_timestamp,
									'REFFERRER_PREVIOUS' => isset($_COOKIE['ct_prev_referer'])?$_COOKIE['ct_prev_referer']:null
								);
								
								$post_info = json_encode($arr);
							}
							
							if($post_info === FALSE)
								$post_info = '';
						
							
							$config_key = $ct_access_key;
							
							$ct = new \Cleantalk();
							$ct->server_url = \IPS\Settings::i()->ct_server_url;
							$ct->work_url = \IPS\Settings::i()->ct_work_url;
							$ct->server_ttl = \IPS\Settings::i()->ct_server_ttl;
							$ct->server_changed = \IPS\Settings::i()->ct_server_changed;
							
							$sender_email = filter_var($member->email, FILTER_SANITIZE_EMAIL);
							$sender_ip = $ct->cleantalk_get_real_ip();
					
							$ct_request = new \CleantalkRequest();
							$ct_request->auth_key = $config_key;
							
							if(isset($_POST['guest_name']))
								$ct_request->sender_nickname = $_POST['guest_name'];
							else
								$ct_request->sender_nickname = $member->name;
							
							$ct_request->sender_ip = $sender_ip;
							$ct_request->sender_email = $sender_email;
							$ct_request->sender_info = $post_info;
							$ct_request->agent = 'ipboard4-195';
							
							$js_keys=Array();
							for($i=-5;$i<=1;$i++){
								$js_keys[]=md5(\IPS\Settings::i()->ct_access_key . '+' . \IPS\Settings::i()->email_in . date("Ymd",time()+86400*$i));
							}
							
							$ct_request->js_on = in_array($_COOKIE['ct_checkjs'], $js_keys) ? 1 : 0;
							$ct_request->submit_time = isset($_COOKIE['ct_ps_timestamp']) ? time() - intval($_COOKIE['ct_ps_timestamp']) : 0;
							$ct_request->message = $comment_to_check;
					
							$ct_result = $ct->isAllowMessage($ct_request);
							if ($ct->server_change)
							{
								\IPS\Settings::i()->ct_work_url = $ct->work_url;
								\IPS\Settings::i()->ct_server_ttl = $ct->server_ttl;
								\IPS\Settings::i()->ct_server_changed = time();
							}							
							if ($ct_result && isset($ct_result->errno) && $ct_result->errno == 0)
							{
								if(isset($ct_result->errno) && $ct_result->errno>0){
									//sendErrorMessage("CleanTalk has some problems, errno is ".$ct_result->errno.", errstr is '".$ct_result->errstr."'")
								}
								if($ct_result->allow == 1){
									// Not spammer.
									//call_user_func_array( 'parent::save', func_get_args() );
									return call_user_func_array( 'parent::create', func_get_args() );
								}else{
									if(isset($_POST['topic_title']))
										$topic->delete();
									
									if ( \IPS\Request::i()->isAjax() ){
										$result=Array("type"=>"error","message"=>$ct_result->comment);
										$result=json_encode($result);
										\IPS\Output::i()->sendOutput( $result, 200, "application/json" );
									}else{
										\IPS\Output::i()->sidebar['enabled'] = FALSE;
										/*
										\IPS\Output::i()->sendOutput(
											\IPS\Theme::i()->getTemplate( 'global', 'core' )->globalTemplate(
												"Forbidden",
												\IPS\Theme::i()->getTemplate( 'global', 'core' )->error( "Forbidden", $ct_result->comment, 1, "" ),
												array( 
													'app' => \IPS\Dispatcher::i()->application ? \IPS\Dispatcher::i()->application->directory : NULL,
													'module' => \IPS\Dispatcher::i()->module ? \IPS\Dispatcher::i()->module->key : NULL,
													'controller' => \IPS\Dispatcher::i()->controller 
												) 
											), 
											200, 
											'text/html', 
											Array(),
											FALSE,
											FALSE 
										);
										//*/
										$ct_die_html = '<head>
														<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
														<title>Blacklisted</title>
														<style type="text/css">
															html {
																background: #f1f1f1;
															}
															body {
																background: #fff;
																color: #444;
																font-family: "Open Sans", sans-serif;
																margin: 2em auto;
																padding: 1em 2em;
																max-width: 700px;
																-webkit-box-shadow: 0 1px 3px rgba(0,0,0,0.13);
																box-shadow: 0 1px 3px rgba(0,0,0,0.13);
															}
															h1 {
																border-bottom: 1px solid #dadada;
																clear: both;
																color: #666;
																font: 24px "Open Sans", sans-serif;
																margin: 30px 0 0 0;
																padding: 0;
																padding-bottom: 7px;
															}
															#error-page {
																margin-top: 50px;
															}
															#error-page p {
																font-size: 14px;
																line-height: 1.5;
																margin: 25px 0 20px;
															}
															a {
																color: #21759B;
																text-decoration: none;
															}
															a:hover {
																color: #D54E21;
															}

																</style>
													</head>
													<body id="error-page">
														<p><center><b style="color: #49C73B;">Clean</b><b style="color: #349ebf;">Talk.</b> Spam protection</center><br><br>
													%ERROR_TEXT%
													<script>setTimeout("history.back()", 8000);</script></p>
													<p><a href="javascript:history.back()"">&laquo; Back</a></p></body>';
											\IPS\Output::i()->sendOutput(str_replace('%ERROR_TEXT%', $ct_result->comment, $ct_die_html),
												200, 
												'text/html', 
												Array(),
												FALSE,
												FALSE 
											);									
										//}
									}
									die();
									return call_user_func_array( 'parent::create', func_get_args() );
								}								
							}
						}
						return call_user_func_array( 'parent::create', func_get_args() );
					}
					catch ( \RuntimeException $e ){
						
						if ( method_exists( get_parent_class(), __FUNCTION__ ) )
							return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
						else
							throw $e;
					}
				}
				
			}]]></hook><hook type="S" class="\IPS\Theme\class_core_admin_global" filename="admin_actions"><![CDATA[//<?php

			class hook16 extends _HOOK_CLASS_{

				/* !Hook Data - DO NOT REMOVE */
				public static function hookData() {
					$html = '';
					if(isset($_COOKIE['cleantalk_close_banner']))
						\IPS\Settings::i()->cleantalk_show_banner = 0;
					
					$show_banner=intval(\IPS\Settings::i()->cleantalk_show_banner);
					if($show_banner == 1)
						$html = "<div style='width:99%;background: #90EE90; padding:10px;border: 2px dashed green;margin:3px;font-size:16px;text-align:center;' id='cleantalk_banner'>Like antispam by CleanTalk? <a href='https://community.invisionpower.com/files/file/7706-anti-spam-ips4/' target='_blank'>Leave a review!</a><div style='float:right;margin-top:-5px;margin-right:-5px;'><a href=# style='text-decoration:none;font-size:14px;font-weight:600;' onclick='jQuery(\"#cleantalk_banner\").hide(\"slow\");document.cookie=\"cleantalk_close_banner = 1; path=/; expires= Fri, 31 Dec 9999 23:59:59 GMT\";'>X</a></div></div>";
					
					return array_merge_recursive(array (
						'globalTemplate' => 
						array (
							0 => array (
								'selector' => '#acpPageHeader',
								'type' => 'add_after',
								'content' => $html,
							),
						),
					), parent::hookData() );
				}
				/* End Hook Data */

			}]]></hook><hook type="C" class="\IPS\core\modules\front\contact\contact" filename="contact"><![CDATA[//<?php

								/* To prevent PHP errors (extending class does not exist) revealing path */
				if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) ){
					exit;
				}

				class hook17 extends _HOOK_CLASS_ {

					protected function manage(){
						try{
							
							$enabled 			= \IPS\Settings::i()->ct_plugin_enabled;
							$contact_form_check 	= \IPS\Settings::i()->ct_contact_form_check;
							
							if($enabled && $contact_form_check){
							
								$form = new \IPS\Helpers\Form( 'contact', 'send' );
								$form->class = 'ipsForm_vertical';
								$member = \IPS\Member::loggedIn();
								
								$form->add( new \IPS\Helpers\Form\Editor( 'contact_text', NULL, TRUE, array(
										'app'			=> 'core',
										'key'			=> 'Contact',
										'autoSaveKey'	=> 'contact-' . $member->member_id,
										// 'minimize'		=> 'x',
								) ) );
								
								if ( !\IPS\Member::loggedIn()->member_id )
								{
									$form->add( new \IPS\Helpers\Form\Text( 'contact_name', NULL, TRUE ) );
									$form->add( new \IPS\Helpers\Form\Email( 'email_address', NULL, TRUE ) );
									$form->add( new \IPS\Helpers\Form\Captcha );
								}
								
								$values = $form->values();
								
								if( $values ){
																	
									require_once(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk.class.php");
									
							
									$post_info = '';
									$lang=\IPS\Lang::getEnabledLanguages();
									$locale=$lang[\IPS\Lang::defaultLanguage()]->short;
									
									//JS checks
									$pointer_data 	= (isset($_COOKIE['ct_pointer_data']) ? json_decode($_COOKIE['ct_pointer_data']) : 0); 	// Pointer data
									$js_timezone 		= (isset($_COOKIE['ct_timezone']) ? $_COOKIE['ct_timezone'] : 0); 					// Timezone from JS
									$first_key_press_timestamp = isset($_COOKIE['ct_fkp_timestamp']) ? $_COOKIE['ct_fkp_timestamp'] : 0; 	//First key down timestamp
									$page_set_timestamp = (isset($_COOKIE['ct_ps_timestamp']) ? $_COOKIE['ct_ps_timestamp'] : 0); 			// Page opened timestamp
													
									if(function_exists('json_encode')){
										
										$arr = array(
											'cms_lang' => $locale,
											'REFFERRER' => $_SERVER['HTTP_REFERER'],
											'USER_AGENT' => $_SERVER['HTTP_USER_AGENT'],
											'mouse_cursor_positions' => $pointer_data,
											'js_timezone' => $js_timezone,
											'key_press_timestamp' => $first_key_press_timestamp,
											'page_set_timestamp' => $page_set_timestamp,
											'REFFERRER_PREVIOUS' => isset($_COOKIE['ct_prev_referer'])?$_COOKIE['ct_prev_referer']:null
										);
										
										$post_info = json_encode($arr);
									}
									
									if($post_info === FALSE)
										$post_info = '';
																		
									$ct = new \Cleantalk();
									$ct->server_url = \IPS\Settings::i()->ct_server_url;
									$ct->work_url = \IPS\Settings::i()->ct_work_url;
									$ct->server_ttl = \IPS\Settings::i()->ct_server_ttl;
									$ct->server_changed = \IPS\Settings::i()->ct_server_changed;

									$sender_ip = $ct->cleantalk_get_real_ip();
									$config_key = \IPS\Settings::i()->ct_access_key;
									
									$js_keys=Array();
									for($i=-5;$i<=1;$i++){
										$js_keys[]=md5($config_key . '+' . \IPS\Settings::i()->email_in . date("Ymd",time()+86400*$i));
									}
									
									$request_summary = implode(", ", array(
										'sender_ip' 		=> $sender_ip,
										'sender_info' 		=> $post_info,
										'js_on' 			=> (in_array($_COOKIE['ct_checkjs'], $js_keys) ? 1 : 0),
										'sender_nickname' 	=> ($member->member_id ? $member->name : $values['contact_name']),
										'sender_email' 		=> ($member->member_id ? $member->email : $values['email_address']),
										'message' 			=> $values['contact_text']
									));
																	
																			
									$ct_request = new \CleantalkRequest();
									
									$ct_request->auth_key 			= $config_key;								
									$ct_request->sender_ip 			= $sender_ip;
									$ct_request->sender_nickname 	= ($member->member_id ? $member->name : $values['contact_name']);
									$ct_request->sender_email 		= ($member->member_id ? $member->email : $values['email_address']);
									$ct_request->sender_info 		= $post_info;
									$ct_request->agent 				= 'ipboard4-195';
									$ct_request->js_on 				= in_array($_COOKIE['ct_checkjs'], $js_keys) ? 1 : 0;
									$ct_request->submit_time 		= isset($_COOKIE['ct_ps_timestamp']) ? time() - intval($_COOKIE['ct_ps_timestamp']) : 0;
									$ct_request->message 			= trim(strip_tags($values['contact_text']));
							
									$ct_result = $ct->isAllowMessage($ct_request);
									if ($ct->server_change)
									{
										\IPS\Settings::i()->ct_work_url = $ct->work_url;
										\IPS\Settings::i()->ct_server_ttl = $ct->server_ttl;
										\IPS\Settings::i()->ct_server_changed = time();
									}									
									// if(isset($ct_result->errno) && $ct_result->errno>0)
										// sendErrorMessage("CleanTalk has some problems, errno is ".$ct_result->errno.", errstr is '".$ct_result->errstr."'")
									
									if ($ct_result && isset($ct_result->errno) && $ct_result->errno == 0)
									{
										$ct_result_comment = $ct_result->comment;
										$ct_result_allow = $ct_result->allow;
																				
										
										
										if($ct_result_allow == 1){
											unset($form);
											return call_user_func_array( 'parent::manage', func_get_args() );
										}else{
																			
											if ( \IPS\Request::i()->isAjax() )
											{
												\IPS\Output::i()->json( 'Failed', 500 );
											}
											else
											{
												$ct_die_html = '<head>
																<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
																<title>Blacklisted</title>
																<style type="text/css">
																	html {
																		background: #f1f1f1;
																	}
																	body {
																		background: #fff;
																		color: #444;
																		font-family: "Open Sans", sans-serif;
																		margin: 2em auto;
																		padding: 1em 2em;
																		max-width: 700px;
																		-webkit-box-shadow: 0 1px 3px rgba(0,0,0,0.13);
																		box-shadow: 0 1px 3px rgba(0,0,0,0.13);
																	}
																	h1 {
																		border-bottom: 1px solid #dadada;
																		clear: both;
																		color: #666;
																		font: 24px "Open Sans", sans-serif;
																		margin: 30px 0 0 0;
																		padding: 0;
																		padding-bottom: 7px;
																	}
																	#error-page {
																		margin-top: 50px;
																	}
																	#error-page p {
																		font-size: 14px;
																		line-height: 1.5;
																		margin: 25px 0 20px;
																	}
																	a {
																		color: #21759B;
																		text-decoration: none;
																	}
																	a:hover {
																		color: #D54E21;
																	}

																		</style>
															</head>
															<body id="error-page">
																<p><center><b style="color: #49C73B;">Clean</b><b style="color: #349ebf;">Talk.</b> Spam protection</center><br><br>
															%ERROR_TEXT%
															<script>setTimeout("history.back()", 8000);</script></p>
															<p><a href="javascript:history.back()"">&laquo; Back</a></p></body>';											
												\IPS\Output::i()->sendOutput(
													str_replace('%ERROR_TEXT%',$ct_result_comment, $ct_die_html),
													200, 
													'text/html', 
													Array(),
													FALSE,
													FALSE 
												);											
											}
											die();
										}										
									}
								}
								
								unset($form);
								
							}
							
							return call_user_func_array( 'parent::manage', func_get_args() );
						}
						catch ( \RuntimeException $e ){
														
							if ( method_exists( get_parent_class(), __FUNCTION__ ) )
								return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
							else
								throw $e;
							
						}
					}
				}
			]]></hook><hook type="C" class="\IPS\core\modules\admin\members\members" filename="mcheck"><![CDATA[//<?php

class hook18 extends _HOOK_CLASS_
{
					protected function manage()
					{
						try
						{		
							/* Create the table */
							$table = new \IPS\Helpers\Table\Db( 'core_members', \IPS\Http\Url::internal( 'app=core&module=members&controller=members' ), array( array( 'email<>?', '' ) ), 'joined' );
										
							if ($table->filter === 'members_filter_spam')
							{
								if (isset(\IPS\Settings::i()->ct_access_key) && \IPS\Settings::i()->ct_plugin_enabled)
								{
									//Check users
									$select = \IPS\Db::i()->select( 'member_id,email,ip_address','core_members');
									$select = $select->setKeyField( 'member_id' );
									$users = array();
									foreach( $select as $member_id => $value )
									    $users[] = $value;
									if (count($users)>0)
									{
										foreach ($users as $key=>$value)
										{
											$data[$key][]=$value['email'];
											$data[$key][]=$value['ip_address'];
										}
										for($i=0;$i<sizeof($data);$i++)
									    {
										    $error="";
											$send=implode(',',$data[$i]);;
											$req="data=$send";
											$opts = array(
											    'http'=>array(
											        'method'=>"POST",
											        'content'=>$req,
											    )
											);
											$context = stream_context_create($opts);
											$result = @file_get_contents("https://api.cleantalk.org/?method_name=spam_check_cms&auth_key=".trim(\IPS\Settings::i()->ct_access_key), 0, $context);
											$result=json_decode($result);
											if(isset($result->error_message))
											{
												$error=$result->error_message;
											}
											else
											{
												if(isset($result->data))
												{
													foreach($result->data as $key=>$value)
													{
														if($key === filter_var($key, FILTER_VALIDATE_IP))
														{
															if($value->appears==1)
															{
																$spam_array[] = $users[$i];
															}
														}
														else
														{
															if($value->appears==1)
															{
																$spam_array[] = $users[$i];
															}
														}
													}
												}
											}
										}
										if (count($spam_array) > 0)
										{
											foreach ($spam_array as $key=>$value)
												\IPS\Db::i()->update( 'core_members', array( 'members_bitoptions' => '65537' ), array( 'member_id=?', $value['member_id']));
										}										
									}
								}

							}
							parent::manage();

						}
						catch ( \RuntimeException $e ){
														
							if ( method_exists( get_parent_class(), __FUNCTION__ ) )
								return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
							else
								throw $e;
							
						}						
					}
}]]></hook></hooks><settings><setting><key>ct_access_key</key><default>0</default></setting><setting><key>ct_posts_to_check</key><default>10</default></setting><setting><key>ct_plugin_enabled</key><default>0</default></setting><setting><key>ct_moderate_new</key><default>0</default></setting><setting><key>ct_contact_form_check</key><default>0</default></setting><setting><key>ct_show_link</key><default>0</default></setting><setting><key>ct_cleantalk_sfw</key><default>0</default></setting><setting><key>ct_server_url</key><default>http://moderate.cleantalk.org</default></setting><setting><key>ct_work_url</key><default>0</default></setting><setting><key>ct_server_ttl</key><default>0</default></setting><setting><key>ct_server_changed</key><default>0</default></setting></settings><settingsCode><![CDATA[//<?php

		function CleantalkGetIP(){
			
			$result=Array();
			if ( function_exists( 'apache_request_headers' ) )
				$headers = apache_request_headers();
			else
				$headers = $_SERVER;
			
			if ( array_key_exists( 'X-Forwarded-For', $headers ) ){
				$the_ip=explode(",", trim($headers['X-Forwarded-For']));
				$result[] = trim($the_ip[0]);
			}
			
			if ( array_key_exists( 'HTTP_X_FORWARDED_FOR', $headers )){
				$the_ip=explode(",", trim($headers['HTTP_X_FORWARDED_FOR']));
				$result[] = trim($the_ip[0]);
			}
			
			$result[] = filter_var( $_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 );

			if(isset($_GET['sfw_test_ip']))
				$result[]=$_GET['sfw_test_ip'];
			
			return $result;
		}

		$sfw_file_ok = TRUE;
		$sfw_table_ok = TRUE;
		if(!file_exists(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk-sfw.class.php") || !file_exists(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk.class.php")){
			$form->addHeader('Missing core files! Please, download them directly from https://github.com/CleanTalk/ips4-antispam/tree/master/general/ and put into /your_root_folder/plugins/cleantalkspamprotect/');
			$sfw_file_ok = FALSE;
		}else if(! \IPS\Db::i()->checkForTable('ct_cleantalk_sfw')){
			$form->addHeader('Spam FireWall feature is disabled because of missing table, enable it and save settings again, please');
			$sfw_table_ok = FALSE;
		}

		$form->add( new \IPS\Helpers\Form\YesNo( 'ct_plugin_enabled', \IPS\Settings::i()->ct_plugin_enabled, FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'ct_plugin_enabled') ) );
		$form->add( new \IPS\Helpers\Form\YesNo( 'ct_moderate_new', \IPS\Settings::i()->ct_moderate_new, FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'ct_moderate_new' ) ) );
		$form->add( new \IPS\Helpers\Form\YesNo( 'ct_contact_form_check', \IPS\Settings::i()->ct_contact_form_check, FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'ct_contact_form_check' ) ) );
		$form->add( new \IPS\Helpers\Form\YesNo( 'ct_show_link', \IPS\Settings::i()->ct_show_link, FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'ct_show_link' ) ) );
		$form->add( new \IPS\Helpers\Form\YesNo( 'ct_cleantalk_sfw', (($sfw_file_ok && $sfw_table_ok) ? \IPS\Settings::i()->ct_cleantalk_sfw : 0), FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'ct_cleantalk_sfw', 'disabled' => !$sfw_file_ok ) ) );
		$form->add( new \IPS\Helpers\Form\Number( 'ct_posts_to_check', (empty(\IPS\Settings::i()->ct_posts_to_check) ? 10 : \IPS\Settings::i()->ct_posts_to_check), FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'ct_posts_to_check', 'min' => 1, 'max' => 10000) ) );
		$form->add( new \IPS\Helpers\Form\Text( 'ct_access_key', (empty(\IPS\Settings::i()->ct_access_key) ? NULL : \IPS\Settings::i()->ct_access_key), FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'ct_access_key', 'placeholder' => 'Enter the key') ) );							
		if ( $values = $form->values() ){
			require_once(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk.class.php");
			$values = $form->values();
			
			$ct = new \Cleantalk();
			$ct->server_url = \IPS\Settings::i()->ct_server_url;
			$ct->work_url = \IPS\Settings::i()->ct_work_url;
			$ct->server_ttl = \IPS\Settings::i()->ct_server_ttl;
			$ct->server_changed = \IPS\Settings::i()->ct_server_changed;


			$ct_request = new \CleantalkRequest();
			$ct_request->auth_key = $values['ct_access_key'];
			$ct_request->feedback = '0:ipboard4-195';
			$ct->sendFeedback($ct_request);
			if ($ct->server_change)
			{
				\IPS\Settings::i()->ct_work_url = $ct->work_url;
				\IPS\Settings::i()->ct_server_ttl = $ct->server_ttl;
				\IPS\Settings::i()->ct_server_changed = time();
			}			
			if($values['ct_cleantalk_sfw'] == 1){
				\IPS\Db::i()->createTable( array(
					'name'		=> 'ct_cleantalk_sfw',
					'columns'	=> array(
						array(
							'name'			=> 'network',
							'type'			=> 'int',
							'length'		=> 11,
							'unsigned'		=> true,
							'allow_null'		=> true
						),
						array(
							'name'			=> 'mask',
							'type'			=> 'int',
							'length'		=> 11,
							'unsigned'		=> true,
							'allow_null'		=> true
						),
					),
					'indexes'	=> array(
						array(
							'type'		=> 'key',
										'name'          => 'network_mask',
							'columns'	=> array( 'network', 'mask' )
						)
					),
					'if_not_exists' => TRUE
				));

				if ($sfw_file_ok && \IPS\Db::i()->checkForTable('ct_cleantalk_sfw')) {
					$sfw_data_ok = TRUE;
					try {
						\IPS\Db::i()->delete('ct_cleantalk_sfw');
					} catch (Exception $e) {
						$sfw_data_ok = FALSE;
					}
					if ($sfw_data_ok){
						$data = Array(	'auth_key' => $values['ct_access_key'],
							'method_name' => '2s_blacklists_db'
						);
						$result=sendRawRequest('https://api.cleantalk.org/2.1',$data,false);
						$result=json_decode($result, true);
						if(isset($result['data'])){
							$result=$result['data'];
							$swf_data_array = array();
							for($i=0;$i<sizeof($result);$i++){
								array_push($swf_data_array, array('network' => $result[$i][0], 'mask' => $result[$i][1]));
							}
							try{
								\IPS\Db::i()->insert('ct_cleantalk_sfw', $swf_data_array);
							} catch (Exception $e) {
								$values['ct_cleantalk_sfw'] = FALSE;
							}
						}
					} else {
						$values['ct_cleantalk_sfw'] = FALSE;
					}
				} else {
					$values['ct_cleantalk_sfw'] = FALSE;
				}
			}
			$data = array();
			$data['auth_key'] = $_POST['ct_access_key'];
			$data['method_name'] = 'notice_validate_key';				
			if(!function_exists('sendRawRequest')){
				require_once(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk.class.php");
			}
			if (!empty($data['auth_key'])){
				$result = sendRawRequest('https://api.cleantalk.org',$data);
				if (isset($result->errno))
				{
		 			\IPS\Output::i()->error( '', 'Cleantalk error - '.$result->curl_err, 1, '');
					return false;					
				}
				else
				{
					$result = json_decode(trim($result));
					if ($result->valid === 1)
					{
						$form->saveAsSettings($values);
						return TRUE;				
					}
					else 
					{
			 			\IPS\Output::i()->error( '', 'Cleantalk error - Wrong access key!', 1, '');
						return false;
					}					
				}		
			}

		}

		return $form;]]></settingsCode><tasks/><widgets/><htmlFiles/><cssFiles/><jsFiles/><resourcesFiles/><lang><word key="ct_plugin_enabled" js="0">Enable CleanTalk</word><word key="ct_contact_form_check" js="0">Protect contact form</word><word key="ct_moderate_new" js="0">Moderate new users posts</word><word key="ct_access_key" js="0">Access key</word><word key="ct_posts_to_check" js="0">Do not check users with posts more than</word><word key="ct_show_link" js="0">Show link to CleanTalk</word><word key="ct_cleantalk_sfw" js="0">Enable SpamFireWall</word></lang><versions><version long="10000" human="1.5.0"><![CDATA[//<?php


		/* To prevent PHP errors (extending class does not exist) revealing path */
		if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) ){
			header( ( isset( $_SERVER['SERVER_PROTOCOL'] ) ? $_SERVER['SERVER_PROTOCOL'] : 'HTTP/1.0' ) . ' 403 Forbidden' );
			exit;
		}

		/**
		 * Install Code
		 */
		class ips_plugins_setup_install
		{
			/**
			 * ...
			 *
			 * @return	array	If returns TRUE, upgrader will proceed to next step. If it returns any other value, it will set this as the value of the 'extra' GET parameter and rerun this step (useful for loops)
			 */
			public function step1(){
				//Remove old files
				if (file_exists(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk.class.php")) 
       				unlink(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk.class.php");
				if (file_exists(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk-sfw.class.php")) 
       				unlink(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk-sfw.class.php");
				if (file_exists(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/sfw_die_page.html")) 
       				unlink(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/sfw_die_page.html");
				if (file_exists(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/mcheck.php")) 
       				unlink(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/mcheck.php");
				if (file_exists(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/updatedb.php")) 
       				unlink(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/updatedb.php");
       			if (file_exists(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/JSON.php")) 
       				unlink(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/JSON.php");		
				$file = file_get_contents('https://raw.githubusercontent.com/CleanTalk/ips4-antispam/master/general/cleantalk.class.php');
				if($file === FALSE){
					return FALSE;
				}
				if(file_put_contents(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk.class.php" , $file) === FALSE){
					return FALSE;
				}
				
				$file = file_get_contents('https://raw.githubusercontent.com/CleanTalk/ips4-antispam/master/general/cleantalk-sfw.class.php');
				if($file === FALSE){
					return FALSE;
				}
				if(file_put_contents(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk-sfw.class.php" , $file) === FALSE){
					return FALSE;
				}
				
				$file = file_get_contents('https://raw.githubusercontent.com/CleanTalk/ips4-antispam/master/general/sfw_die_page.html');
				if($file === FALSE){
					return FALSE;
				}
				if(file_put_contents(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/sfw_die_page.html" , $file) === FALSE){
					return FALSE;
				}

				\IPS\Db::i()->dropTable('ct_cleantalk_sfw', TRUE);
				\IPS\Db::i()->createTable( array(
					'name'		=> 'ct_cleantalk_sfw',
					'columns'	=> array(
						array(
							'name'			=> 'network',
							'type'			=> 'int',
							'length'		=> 11,
							'unsigned'		=> true,
							'allow_null'		=> true
						),
						array(
							'name'			=> 'mask',
							'type'			=> 'int',
							'length'		=> 11,
							'unsigned'		=> true,
							'allow_null'		=> true
						),
					),
					'indexes'	=> array(
						array(
							'type'		=> 'key',
										'name'          => 'network_mask',
							'columns'	=> array( 'network', 'mask' )
						)
					),
					'if_not_exists' => TRUE
				));
				
				return TRUE;
				
			}
			
			// You can create as many additional methods (step2, step3, etc.) as is necessary.
			// Each step will be executed in a new HTTP request
		}]]></version><version long="19100" human="1.9.1"><![CDATA[//<?php
/* To prevent PHP errors (extending class does not exist) revealing path */
if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) )
{
	header( ( isset( $_SERVER['SERVER_PROTOCOL'] ) ? $_SERVER['SERVER_PROTOCOL'] : 'HTTP/1.0' ) . ' 403 Forbidden' );
	exit;
}
/**
 * 1.9.1 Upgrade Code
 */
class ips_plugins_setup_upg_19100
{
	/**
	 * ...
	 *
	 * @return	array	If returns TRUE, upgrader will proceed to next step. If it returns any other value, it will set this as the value of the 'extra' GET parameter and rerun this step (useful for loops)
	 */
	public function step1()
	{
       			if (file_exists(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/JSON.php")) 
       				unlink(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/JSON.php");		
				$file = file_get_contents('https://raw.githubusercontent.com/CleanTalk/ips4-antispam/master/general/cleantalk.class.php');
				if($file === FALSE){
					return FALSE;
				}
				if(file_put_contents(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk.class.php" , $file) === FALSE){
					return FALSE;
				}
				
				$file = file_get_contents('https://raw.githubusercontent.com/CleanTalk/ips4-antispam/master/general/cleantalk-sfw.class.php');
				if($file === FALSE){
					return FALSE;
				}
				if(file_put_contents(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/cleantalk-sfw.class.php" , $file) === FALSE){
					return FALSE;
				}
				
				$file = file_get_contents('https://raw.githubusercontent.com/CleanTalk/ips4-antispam/master/general/sfw_die_page.html');
				if($file === FALSE){
					return FALSE;
				}
				if(file_put_contents(\IPS\ROOT_PATH."/plugins/cleantalkspamprotect/sfw_die_page.html" , $file) === FALSE){
					return FALSE;
				}

				\IPS\Db::i()->dropTable('ct_cleantalk_sfw', TRUE);
				\IPS\Db::i()->createTable( array(
					'name'		=> 'ct_cleantalk_sfw',
					'columns'	=> array(
						array(
							'name'			=> 'network',
							'type'			=> 'int',
							'length'		=> 11,
							'unsigned'		=> true,
							'allow_null'		=> true
						),
						array(
							'name'			=> 'mask',
							'type'			=> 'int',
							'length'		=> 11,
							'unsigned'		=> true,
							'allow_null'		=> true
						),
					),
					'indexes'	=> array(
						array(
							'type'		=> 'key',
										'name'          => 'network_mask',
							'columns'	=> array( 'network', 'mask' )
						)
					),
					'if_not_exists' => TRUE
				));
				
				return TRUE;
	}
	
	// You can create as many additional methods (step2, step3, etc.) as is necessary.
	// Each step will be executed in a new HTTP request
}]]></version></versions></plugin>
