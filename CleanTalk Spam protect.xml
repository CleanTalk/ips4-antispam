<?xml version="1.0" encoding="UTF-8"?>
<plugin name="CleanTalk Spam protect" version_long="10001" version_human="1.6.0" author="CleanTalk" website="https://cleantalk.org" update_check=""><hooks><hook type="C" class="\IPS\Member"><![CDATA[//<?php

class hook11 extends _HOOK_CLASS_
{
  	public function getCheckJSArray()
	{
		try
		{
	        $result=Array();
	        for($i=-5;$i<=1;$i++)
	        {
	            $result[]=md5(\IPS\Settings::i()->access_key . '+' . \IPS\Settings::i()->email_in . date("Ymd",time()+86400*$i));
	        }
	        return $result;
		}
		catch ( \RuntimeException $e )
		{
			if ( method_exists( get_parent_class(), __FUNCTION__ ) )
			{
				return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
			}
			else
			{
				throw $e;
			}
		}
	}

	/**
	 * [ActiveRecord] Save Changed Columns
	 *
	 * @return	void
	 * @note	We have to be careful when upgrading in case we are coming from an older version
	 */
	public function save()
	{
		try
		{
	      	$new		= $this->_new;
	      	$enabled=\IPS\Settings::i()->plugin_enabled;
	      	$access_key=\IPS\Settings::i()->access_key;
	      	if($enabled==1&&$new)
	      	{
	      		require_once(dirname($_SERVER['SCRIPT_FILENAME'])."/uploads/cleantalk.class.php");
				require_once(dirname($_SERVER['SCRIPT_FILENAME'])."/uploads/JSON.php");
				session_name('cleantalksession');
			    if (!isset($_SESSION))
			    {
					session_start();
			    }
			    if (array_key_exists('formtime', $_SESSION))
			    {
					$submit_time = time() - (int) $_SESSION['formtime'];
			    }
			    else
			    {
					$submit_time = NULL;
			    }
			    $_SESSION['formtime'] = time();
		
			    $post_info = '';
			    $lang=\IPS\Lang::getEnabledLanguages();
			    $locale=$lang[\IPS\Lang::defaultLanguage()]->short;
			    if(function_exists('json_encode'))
			    {
			    	
					$arr = array(
					    'cms_lang' => $locale,
					    'REFFERRER' => $_SERVER['HTTP_REFERER'],
					    'USER_AGENT' => $_SERVER['HTTP_USER_AGENT'],
					);
					$post_info = json_encode($arr);
			    }
			    if($post_info === FALSE) $post_info = '';
			    
			    $ct_url = 'http://moderate.cleantalk.ru';
			    
			    $config_work_url =  $ct_url;
			    $config_ttl = 43200;
			    $config_changed = 1349162987;
		
			    $config_key = $access_key;
			    
			    $ct = new \Cleantalk();
			    $ct->work_url = $config_work_url;
			    $ct->server_url = $ct_url;
			    $ct->server_ttl = $config_ttl;
			    $ct->server_changed = $config_changed;
		
			    $sender_email = filter_var($_POST['email_address'], FILTER_SANITIZE_EMAIL);
			    $sender_ip = $ct->ct_session_ip($_SERVER['REMOTE_ADDR']);
		
			    $ct_request = new \CleantalkRequest();
			    $ct_request->auth_key = $config_key;
				$ct_request->sender_nickname = $_POST['username'];
			    $ct_request->sender_ip = $sender_ip;
			    $ct_request->sender_email = $sender_email;
			    $ct_request->post_info = $post_info;
			    $ct_request->agent = 'ipboard4-16';
			    //$ct_request->js_on = $_COOKIE['ct_checkjs'] == md5(\IPS\Settings::i()->access_key . '+' . \IPS\Settings::i()->email_in) ? 1 : 0;
			    $ct_request->js_on = in_array($_COOKIE['ct_checkjs'], self::getCheckJSArray()) ? 1 : 0;
			    $ct_request->submit_time = $submit_time;
		
			    $ct_result = $ct->isAllowUser($ct_request);
			    
			    if($ct_result->allow == 1)
			    {
					// Not spammer.
					call_user_func_array( 'parent::save', func_get_args() );
			    }
			    else
			    {
					// Spammer - display message and exit.
					
					if ( \IPS\Request::i()->isAjax() )
					{
						$err_str = '<span style="color:#ab1f39;">' . $ct_result->comment . '</span><script>setTimeout("history.back()", 5000);</script>';
						print $err_str;
					}
					else
					{
						\IPS\Output::i()->sidebar['enabled'] = FALSE;
						\IPS\Output::i()->sendOutput( \IPS\Theme::i()->getTemplate( 'global', 'core' )->globalTemplate( "Forbidden", \IPS\Theme::i()->getTemplate( 'global', 'core' )->error( "Forbidden", $ct_result->comment, 1, "" ), array( 'app' => \IPS\Dispatcher::i()->application ? \IPS\Dispatcher::i()->application->directory : NULL, 'module' => \IPS\Dispatcher::i()->module ? \IPS\Dispatcher::i()->module->key : NULL, 'controller' => \IPS\Dispatcher::i()->controller ) ), 200, 'text/html', Array(), FALSE, FALSE );
					}
					die();
			    }
	      	}
			return call_user_func_array( 'parent::save', func_get_args() );
		}
		catch ( \RuntimeException $e )
		{
			if ( method_exists( get_parent_class(), __FUNCTION__ ) )
			{
				return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
			}
			else
			{
				throw $e;
			}
		}
	}

}]]></hook><hook type="C" class="\IPS\Output"><![CDATA[//<?php

class hook12 extends _HOOK_CLASS_
{
	public function getTitle( $title )
	{
		try
		{
			if(session_id()=='')session_start();
			$html = '
	<script type="text/javascript">
	function ctSetCookie(c_name, value, def_value) {
	    document.cookie = c_name + "=" + escape(value.replace(/^def_value$/, value)) + "; path=/";
	}
	ctSetCookie("%s", "%s", "%s");
	</script>
	';
			$ct_checkjs_key=md5(\IPS\Settings::i()->access_key . '+' . \IPS\Settings::i()->email_in . date("Ymd",time()));
			$html = sprintf($html, "ct_checkjs", $ct_checkjs_key, 0);
			$this->endBodyCode.=$html;
			return $title;
		}
		catch ( \RuntimeException $e )
		{
			if ( method_exists( get_parent_class(), __FUNCTION__ ) )
			{
				return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
			}
			else
			{
				throw $e;
			}
		}
	}
}]]></hook><hook type="C" class="\IPS\Content\Comment"><![CDATA[//<?php

abstract class hook13 extends _HOOK_CLASS_
{
	public static function create( $item, $comment, $first=FALSE, $guestName=NULL, $incrementPostCount=NULL, $member=NULL, \IPS\DateTime $time=NULL )
	{
		try
		{
			$topic=$item;
			if ( $member === NULL )
			{
				$member = \IPS\Member::loggedIn();
			}
			if(isset($_POST['topic_title']))
			{
				$comment=$_POST['topic_title']."\n".$comment;
			}
			$access_key=\IPS\Settings::i()->access_key;
			if(!$member->isAdmin() && $member->member_posts<=10 && \IPS\Settings::i()->moderate_new==1)
			{
				require_once(dirname($_SERVER['SCRIPT_FILENAME'])."/uploads/cleantalk.class.php");
				require_once(dirname($_SERVER['SCRIPT_FILENAME'])."/uploads/JSON.php");
				session_name('cleantalksession');
			    if (!isset($_SESSION))
			    {
					session_start();
			    }
			    if (array_key_exists('formtime', $_SESSION))
			    {
					$submit_time = time() - (int) $_SESSION['formtime'];
			    }
			    else
			    {
					$submit_time = NULL;
			    }
			    $_SESSION['formtime'] = time();
		
			    $post_info = '';
			    $lang=\IPS\Lang::getEnabledLanguages();
			    $locale=$lang[\IPS\Lang::defaultLanguage()]->short;
			    if(function_exists('json_encode'))
			    {
			    	
					$arr = array(
					    'cms_lang' => $locale,
					    'REFFERRER' => $_SERVER['HTTP_REFERER'],
					    'USER_AGENT' => $_SERVER['HTTP_USER_AGENT'],
					);
					$post_info = json_encode($arr);
			    }
			    if($post_info === FALSE) $post_info = '';
			    
			    $ct_url = 'http://moderate.cleantalk.ru';
			    
			    $config_work_url =  $ct_url;
			    $config_ttl = 43200;
			    $config_changed = 1349162987;
			    
			    $config_key = $access_key;
			    
			    $ct = new \Cleantalk();
			    $ct->work_url = $config_work_url;
			    $ct->server_url = $ct_url;
			    $ct->server_ttl = $config_ttl;
			    $ct->server_changed = $config_changed;
			    
			    $sender_email = filter_var($member->email, FILTER_SANITIZE_EMAIL);
			    $sender_ip = $ct->ct_session_ip($_SERVER['REMOTE_ADDR']);
		
			    $ct_request = new \CleantalkRequest();
			    $ct_request->auth_key = $config_key;
				$ct_request->sender_nickname = $member->name;
			    $ct_request->sender_ip = $sender_ip;
			    $ct_request->sender_email = $sender_email;
			    $ct_request->post_info = $post_info;
			    $ct_request->agent = 'ipboard4-16';
			    
			    $js_keys=Array();
		        for($i=-5;$i<=1;$i++)
		        {
		            $js_keys[]=md5(\IPS\Settings::i()->access_key . '+' . \IPS\Settings::i()->email_in . date("Ymd",time()+86400*$i));
		        }
			    
			    $ct_request->js_on = in_array($_COOKIE['ct_checkjs'], $js_keys) ? 1 : 0;
			    $ct_request->submit_time = $submit_time;
			    $ct_request->message = $comment;
		
			    $ct_result = $ct->isAllowMessage($ct_request);
			    
			    if($ct_result->allow == 1)
			    {
					// Not spammer.
					//call_user_func_array( 'parent::save', func_get_args() );
					return call_user_func_array( 'parent::create', func_get_args() );
			    }
			    else
			    {
			    	if(isset($_POST['topic_title']))
			    	{
			    		$topic->delete();
			    	}
					if ( \IPS\Request::i()->isAjax() )
					{
						$result=Array("type"=>"error","message"=>$ct_result->comment);
						$result=json_encode($result);
						\IPS\Output::i()->sendOutput( $result, 200, "application/json" );
					}
					else
					{
						\IPS\Output::i()->sidebar['enabled'] = FALSE;
						\IPS\Output::i()->sendOutput( \IPS\Theme::i()->getTemplate( 'global', 'core' )->globalTemplate( "Forbidden", \IPS\Theme::i()->getTemplate( 'global', 'core' )->error( "Forbidden", $ct_result->comment, 1, "" ), array( 'app' => \IPS\Dispatcher::i()->application ? \IPS\Dispatcher::i()->application->directory : NULL, 'module' => \IPS\Dispatcher::i()->module ? \IPS\Dispatcher::i()->module->key : NULL, 'controller' => \IPS\Dispatcher::i()->controller ) ), 200, 'text/html', Array(), FALSE, FALSE );
					}
					die();
					return call_user_func_array( 'parent::create', func_get_args() );
			    }
			}
			return call_user_func_array( 'parent::create', func_get_args() );
		}
		catch ( \RuntimeException $e )
		{
			if ( method_exists( get_parent_class(), __FUNCTION__ ) )
			{
				return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
			}
			else
			{
				throw $e;
			}
		}
	}
	
}]]></hook></hooks><settings><setting><key>access_key</key><default>0</default></setting><setting><key>plugin_enabled</key><default>0</default></setting><setting><key>moderate_new</key><default>0</default></setting></settings><settingsCode><![CDATA[//<?php


$form->add( new \IPS\Helpers\Form\YesNo( 'plugin_enabled', \IPS\Settings::i()->plugin_enabled, FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'plugin_enabled' ) ) );
$form->add( new \IPS\Helpers\Form\YesNo( 'moderate_new', \IPS\Settings::i()->moderate_new, FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'moderate_new' ) ) );
$form->add( new \IPS\Helpers\Form\Text( 'access_key', \IPS\Settings::i()->access_key, FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'access_key' ) ) );

if ( $values = $form->values() )
{
	$form->saveAsSettings();
	return TRUE;
}

return $form;]]></settingsCode><tasks/><widgets/><htmlFiles/><cssFiles/><jsFiles/><resourcesFiles/><lang><word key="plugin_enabled" js="0">Enable CleanTalk</word><word key="moderate_new" js="0">Moderate new users posts</word><word key="access_key" js="0">Access key</word></lang><versions><version long="10001" human="1.6.0"><![CDATA[//<?php


/* To prevent PHP errors (extending class does not exist) revealing path */
if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) )
{
	header( ( isset( $_SERVER['SERVER_PROTOCOL'] ) ? $_SERVER['SERVER_PROTOCOL'] : 'HTTP/1.0' ) . ' 403 Forbidden' );
	exit;
}

/**
 * 1.6.0 Upgrade Code
 */
class ips_plugins_setup_upg_10001
{
	/**
	 * ...
	 *
	 * @return	array	If returns TRUE, upgrader will proceed to next step. If it returns any other value, it will set this as the value of the 'extra' GET parameter and rerun this step (useful for loops)
	 */
	public function step1()
	{
		

		return TRUE;
	}
	
	// You can create as many additional methods (step2, step3, etc.) as is necessary.
	// Each step will be executed in a new HTTP request
}]]></version></versions></plugin>
