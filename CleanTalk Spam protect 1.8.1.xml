<?xml version="1.0" encoding="UTF-8"?>
<plugin name="CleanTalk Spam protect" version_long="10000" version_human="1.7.0" author="CleanTalk" website="https://cleantalk.org" update_check=""><hooks><hook type="C" class="\IPS\Member"><![CDATA[//<?php

class hook13 extends _HOOK_CLASS_
{
  	public function getCheckJSArray()
	{
		try
		{
	        $result=Array();
	        for($i=-5;$i<=1;$i++)
	        {
	            $result[]=md5(\IPS\Settings::i()->access_key . '+' . \IPS\Settings::i()->email_in . date("Ymd",time()+86400*$i));
	        }
	        return $result;
		}
		catch ( \RuntimeException $e )
		{
			if ( method_exists( get_parent_class(), __FUNCTION__ ) )
			{
				return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
			}
			else
			{
				throw $e;
			}
		}
	}

	/**
	 * [ActiveRecord] Save Changed Columns
	 *
	 * @return	void
	 * @note	We have to be careful when upgrading in case we are coming from an older version
	 */
	public function save()
	{
		try
		{
	      	$new		= $this->_new;
	      	$enabled=\IPS\Settings::i()->plugin_enabled;
	      	$access_key=\IPS\Settings::i()->access_key;
	      	if($enabled==1&&$new)
	      	{
	      		require_once(dirname($_SERVER['SCRIPT_FILENAME'])."/uploads/cleantalk.class.php");
				require_once(dirname($_SERVER['SCRIPT_FILENAME'])."/uploads/JSON.php");
				session_name('cleantalksession');
			    if (!isset($_SESSION))
			    {
					session_start();
			    }
			    if (array_key_exists('formtime', $_SESSION))
			    {
					$submit_time = time() - (int) $_SESSION['formtime'];
			    }
			    else
			    {
					$submit_time = NULL;
			    }
			    $_SESSION['formtime'] = time();
		
			    $post_info = '';
			    $lang=\IPS\Lang::getEnabledLanguages();
			    $locale=$lang[\IPS\Lang::defaultLanguage()]->short;
			    if(function_exists('json_encode'))
			    {
			    	
					$arr = array(
					    'cms_lang' => $locale,
					    'REFFERRER' => $_SERVER['HTTP_REFERER'],
					    'USER_AGENT' => $_SERVER['HTTP_USER_AGENT'],
					);
					$post_info = json_encode($arr);
			    }
			    if($post_info === FALSE) $post_info = '';
			    
			    $ct_url = 'http://moderate.cleantalk.ru';
			    
			    $config_work_url =  $ct_url;
			    $config_ttl = 43200;
			    $config_changed = 1349162987;
		
			    $config_key = $access_key;
			    
			    $ct = new \Cleantalk();
			    $ct->work_url = $config_work_url;
			    $ct->server_url = $ct_url;
			    $ct->server_ttl = $config_ttl;
			    $ct->server_changed = $config_changed;
		
			    $sender_email = filter_var($_POST['email_address'], FILTER_SANITIZE_EMAIL);
			    $sender_ip = $ct->ct_session_ip($_SERVER['REMOTE_ADDR']);
		
			    $ct_request = new \CleantalkRequest();
			    $ct_request->auth_key = $config_key;
				$ct_request->sender_nickname = $_POST['username'];
			    $ct_request->sender_ip = $sender_ip;
			    $ct_request->sender_email = $sender_email;
			    $ct_request->sender_info = $post_info;
			    $ct_request->agent = 'ipboard4-181';
			    //$ct_request->js_on = $_COOKIE['ct_checkjs'] == md5(\IPS\Settings::i()->access_key . '+' . \IPS\Settings::i()->email_in) ? 1 : 0;
			    $ct_request->js_on = in_array($_COOKIE['ct_checkjs'], self::getCheckJSArray()) ? 1 : 0;
			    $ct_request->submit_time = $submit_time;
		
			    $ct_result = $ct->isAllowUser($ct_request);
			    if(isset($ct_result->errno) && $ct_result->errno>0)
			    {
			    	//sendErrorMessage("CleanTalk has some problems, errno is ".$ct_result->errno.", errstr is '".$ct_result->errstr."'")
			    }
			    
			    if($ct_result->allow == 1)
			    {
					// Not spammer.
					call_user_func_array( 'parent::save', func_get_args() );
			    }
			    else
			    {
					// Spammer - display message and exit.
					
					if ( \IPS\Request::i()->isAjax() )
					{
						$err_str = '<span style="color:#ab1f39;">' . $ct_result->comment . '</span><script>setTimeout("history.back()", 5000);</script>';
						print $err_str;
					}
					else
					{
						\IPS\Output::i()->sidebar['enabled'] = FALSE;
						\IPS\Output::i()->sendOutput( \IPS\Theme::i()->getTemplate( 'global', 'core' )->globalTemplate( "Forbidden", \IPS\Theme::i()->getTemplate( 'global', 'core' )->error( "Forbidden", $ct_result->comment, 1, "" ), array( 'app' => \IPS\Dispatcher::i()->application ? \IPS\Dispatcher::i()->application->directory : NULL, 'module' => \IPS\Dispatcher::i()->module ? \IPS\Dispatcher::i()->module->key : NULL, 'controller' => \IPS\Dispatcher::i()->controller ) ), 200, 'text/html', Array(), FALSE, FALSE );
					}
					die();
			    }
	      	}
			return call_user_func_array( 'parent::save', func_get_args() );
		}
		catch ( \RuntimeException $e )
		{
			if ( method_exists( get_parent_class(), __FUNCTION__ ) )
			{
				return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
			}
			else
			{
				throw $e;
			}
		}
	}

}]]></hook><hook type="C" class="\IPS\Output"><![CDATA[//<?php

class hook14 extends _HOOK_CLASS_
{
	public function getTitle( $title )
	{
		try
		{
			if(\IPS\Settings::i()->cleantalk_sfw == 1)
			{
				$is_sfw_check=true;
			   	$ip=$this->CleantalkGetIP();
			   	$ip=array_unique($ip);
			   	$key=\IPS\Settings::i()->access_key;
			   	for($i=0;$i<sizeof($ip);$i++)
				{
			    	if(isset($_COOKIE['ct_sfw_pass_key']) && $_COOKIE['ct_sfw_pass_key']==md5($ip[$i].$key))
			    	{
			    		$is_sfw_check=false;
			    		if(isset($_COOKIE['ct_sfw_passed']))
			    		{
			    			@setcookie ('ct_sfw_passed', '0', 1, "/");
			    		}
			    	}
			    }
				if($is_sfw_check)
				{
					include_once(dirname(__FILE__)."/uploads/cleantalk-sfw.class.php");
					$sfw = new \CleanTalkSFW();
					$sfw->cleantalk_get_real_ip();
					$sfw->check_ip();
					if($sfw->result)
					{
						$sfw->sfw_die();
					}
				}
			}
			if(session_id()=='')session_start();
			$show_link=\IPS\Settings::i()->show_link;
			$html = '
	<script type="text/javascript">
	function ctSetCookie(c_name, value, def_value) {
	    document.cookie = c_name + "=" + escape(value.replace(/^def_value$/, value)) + "; path=/";
	}
	ctSetCookie("%s", "%s", "%s");
	</script>
	';
			$ct_checkjs_key=md5(\IPS\Settings::i()->access_key . '+' . \IPS\Settings::i()->email_in . date("Ymd",time()));
			$html = sprintf($html, "ct_checkjs", $ct_checkjs_key, 0);
			if($show_link==1)
			{
				$html.="<div id='cleantalk_footer_link' style='width:100%;text-align:center;'><a href='https://cleantalk.org/ips-cs-4-anti-spam-plugin'>IPS spam</a> blocked by CleanTalk.</div>";
			}
			$this->endBodyCode.=$html;
			return $title;
		}
		catch ( \RuntimeException $e )
		{
			if ( method_exists( get_parent_class(), __FUNCTION__ ) )
			{
				return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
			}
			else
			{
				throw $e;
			}
		}
	}
	
	public function CleantalkGetIP()
	{
		try
		{
			$result=Array();
			if ( function_exists( 'apache_request_headers' ) )
			{
				$headers = apache_request_headers();
			}
			else
			{
				$headers = $_SERVER;
			}
			if ( array_key_exists( 'X-Forwarded-For', $headers ) )
			{
				$the_ip=explode(",", trim($headers['X-Forwarded-For']));
				$result[] = trim($the_ip[0]);
			}
			if ( array_key_exists( 'HTTP_X_FORWARDED_FOR', $headers ))
			{
				$the_ip=explode(",", trim($headers['HTTP_X_FORWARDED_FOR']));
				$result[] = trim($the_ip[0]);
			}
			$result[] = filter_var( $_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 );
		
			if(isset($_GET['sfw_test_ip']))
			{
				$result[]=$_GET['sfw_test_ip'];
			}
			return $result;
		}
		catch ( \RuntimeException $e )
		{
			if ( method_exists( get_parent_class(), __FUNCTION__ ) )
			{
				return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
			}
			else
			{
				throw $e;
			}
		}
	}
}]]></hook><hook type="C" class="\IPS\Content\Comment"><![CDATA[//<?php

abstract class hook15 extends _HOOK_CLASS_
{
	public static function create( $item, $comment, $first=FALSE, $guestName=NULL, $incrementPostCount=NULL, $member=NULL, \IPS\DateTime $time=NULL )
	{
		try
		{
			$topic=$item;
			if ( $member === NULL )
			{
				$member = \IPS\Member::loggedIn();
			}
			if(isset($_POST['topic_title']))
			{
				$comment=$_POST['topic_title']."\n".$comment;
			}
			$access_key=\IPS\Settings::i()->access_key;
			if(!$member->isAdmin() && $member->member_posts<=10 && \IPS\Settings::i()->moderate_new==1)
			{
				require_once(dirname($_SERVER['SCRIPT_FILENAME'])."/uploads/cleantalk.class.php");
				require_once(dirname($_SERVER['SCRIPT_FILENAME'])."/uploads/JSON.php");
				session_name('cleantalksession');
			    if (!isset($_SESSION))
			    {
					session_start();
			    }
			    if (array_key_exists('formtime', $_SESSION))
			    {
					$submit_time = time() - (int) $_SESSION['formtime'];
			    }
			    else
			    {
					$submit_time = NULL;
			    }
			    $_SESSION['formtime'] = time();
		
			    $post_info = '';
			    $lang=\IPS\Lang::getEnabledLanguages();
			    $locale=$lang[\IPS\Lang::defaultLanguage()]->short;
			    if(function_exists('json_encode'))
			    {
			    	
					$arr = array(
					    'cms_lang' => $locale,
					    'REFFERRER' => $_SERVER['HTTP_REFERER'],
					    'USER_AGENT' => $_SERVER['HTTP_USER_AGENT'],
					);
					$post_info = json_encode($arr);
			    }
			    if($post_info === FALSE) $post_info = '';
			    
			    $ct_url = 'http://moderate.cleantalk.ru';
			    
			    $config_work_url =  $ct_url;
			    $config_ttl = 43200;
			    $config_changed = 1349162987;
			    
			    $config_key = $access_key;
			    
			    $ct = new \Cleantalk();
			    $ct->work_url = $config_work_url;
			    $ct->server_url = $ct_url;
			    $ct->server_ttl = $config_ttl;
			    $ct->server_changed = $config_changed;
			    
			    $sender_email = filter_var($member->email, FILTER_SANITIZE_EMAIL);
			    $sender_ip = $ct->ct_session_ip($_SERVER['REMOTE_ADDR']);
		
			    $ct_request = new \CleantalkRequest();
			    $ct_request->auth_key = $config_key;
			    if(isset($_POST['guest_name']))
			    {
			    	$ct_request->sender_nickname = $_POST['guest_name'];
			    }
			    else
			    {
					$ct_request->sender_nickname = $member->name;
				}
			    $ct_request->sender_ip = $sender_ip;
			    $ct_request->sender_email = $sender_email;
			    $ct_request->sender_info = $post_info;
			    $ct_request->agent = 'ipboard4-181';
			    
			    $js_keys=Array();
		        for($i=-5;$i<=1;$i++)
		        {
		            $js_keys[]=md5(\IPS\Settings::i()->access_key . '+' . \IPS\Settings::i()->email_in . date("Ymd",time()+86400*$i));
		        }
			    
			    $ct_request->js_on = in_array($_COOKIE['ct_checkjs'], $js_keys) ? 1 : 0;
			    $ct_request->submit_time = $submit_time;
			    $ct_request->message = $comment;
		
			    $ct_result = $ct->isAllowMessage($ct_request);
			    if(isset($ct_result->errno) && $ct_result->errno>0)
			    {
			    	//sendErrorMessage("CleanTalk has some problems, errno is ".$ct_result->errno.", errstr is '".$ct_result->errstr."'")
			    }
			    
			    if($ct_result->allow == 1)
			    {
					// Not spammer.
					//call_user_func_array( 'parent::save', func_get_args() );
					return call_user_func_array( 'parent::create', func_get_args() );
			    }
			    else
			    {
			    	if(isset($_POST['topic_title']))
			    	{
			    		$topic->delete();
			    	}
					if ( \IPS\Request::i()->isAjax() )
					{
						$result=Array("type"=>"error","message"=>$ct_result->comment);
						$result=json_encode($result);
						\IPS\Output::i()->sendOutput( $result, 200, "application/json" );
					}
					else
					{
						\IPS\Output::i()->sidebar['enabled'] = FALSE;
						\IPS\Output::i()->sendOutput( \IPS\Theme::i()->getTemplate( 'global', 'core' )->globalTemplate( "Forbidden", \IPS\Theme::i()->getTemplate( 'global', 'core' )->error( "Forbidden", $ct_result->comment, 1, "" ), array( 'app' => \IPS\Dispatcher::i()->application ? \IPS\Dispatcher::i()->application->directory : NULL, 'module' => \IPS\Dispatcher::i()->module ? \IPS\Dispatcher::i()->module->key : NULL, 'controller' => \IPS\Dispatcher::i()->controller ) ), 200, 'text/html', Array(), FALSE, FALSE );
					}
					die();
					return call_user_func_array( 'parent::create', func_get_args() );
			    }
			}
			return call_user_func_array( 'parent::create', func_get_args() );
		}
		catch ( \RuntimeException $e )
		{
			if ( method_exists( get_parent_class(), __FUNCTION__ ) )
			{
				return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
			}
			else
			{
				throw $e;
			}
		}
	}
	
}]]></hook><hook type="S" class="\IPS\Theme\class_core_admin_global"><![CDATA[//<?php

class hook16 extends _HOOK_CLASS_
{

/* !Hook Data - DO NOT REMOVE */
public static function hookData() {
	$last_check=intval(\IPS\Settings::i()->cleantalk_last_check);
	$last_status=intval(\IPS\Settings::i()->cleantalk_last_status);
	
	$api_key = \IPS\Settings::i()->access_key;
	$result = '';
	$html = '';
	if(time()-$last_check>86400 && $api_key!=0 && $api_key!='') // 
	{
		$data = array();
		$data['auth_key'] = $api_key;
		$data['method_name'] = 'notice_validate_key';
		if(!function_exists('sendRawRequest'))
		{
			require_once(dirname($_SERVER['SCRIPT_FILENAME'])."/../uploads/cleantalk.class.php");
			require_once(dirname($_SERVER['SCRIPT_FILENAME'])."/../uploads/JSON.php");
		}
		$result = sendRawRequest('https://api.cleantalk.org',$data);
		$result = json_decode(trim($result));
		if(isset($result->valid))
		{
			$new_status = intval($result->valid);
			\IPS\Settings::i()->cleantalk_last_status = $new_status;
		}
		else
		{
			$new_status = 0;
		}
		if($new_status == 1 && $last_status == 0)
		{
			\IPS\Settings::i()->cleantalk_show_banner = 1;
		}
		\IPS\Settings::i()->cleantalk_last_check = time();
	}
	if(isset($_COOKIE['cleantalk_close_banner']))
	{
		\IPS\Settings::i()->cleantalk_show_banner = 0;
	}
	$show_banner=intval(\IPS\Settings::i()->cleantalk_show_banner);
	if($show_banner == 1)
	{
		$html = "<div style='width:99%;background: #90EE90; padding:10px;border: 2px dashed green;margin:3px;font-size:16px;text-align:center;' id='cleantalk_banner'>Like antispam by CleanTalk? <a href='https://community.invisionpower.com/files/file/7706-anti-spam-ips4/' target='_blank'>Leave a review!</a><div style='float:right;margin-top:-5px;margin-right:-5px;'><a href=# style='text-decoration:none;font-size:14px;font-weight:600;' onclick='jQuery(\"#cleantalk_banner\").hide(\"slow\");document.cookie=\"cleantalk_close_banner = 1;\"'>X</a></div></div>";
	}
 return array_merge_recursive( array (
  'globalTemplate' => 
  array (
    0 => 
    array (
      'selector' => '#acpPageHeader',
      'type' => 'add_after',
      'content' => $html,
    ),
  ),
), parent::hookData() );
}
/* End Hook Data */




}]]></hook></hooks><settings><setting><key>access_key</key><default>0</default></setting><setting><key>plugin_enabled</key><default>0</default></setting><setting><key>moderate_new</key><default>0</default></setting><setting><key>show_link</key><default>0</default></setting><setting><key>cleantalk_sfw</key><default>0</default></setting></settings><settingsCode><![CDATA[//<?php

function CleantalkGetIP()
{
	$result=Array();
	if ( function_exists( 'apache_request_headers' ) )
	{
		$headers = apache_request_headers();
	}
	else
	{
		$headers = $_SERVER;
	}
	if ( array_key_exists( 'X-Forwarded-For', $headers ) )
	{
		$the_ip=explode(",", trim($headers['X-Forwarded-For']));
		$result[] = trim($the_ip[0]);
	}
	if ( array_key_exists( 'HTTP_X_FORWARDED_FOR', $headers ))
	{
		$the_ip=explode(",", trim($headers['HTTP_X_FORWARDED_FOR']));
		$result[] = trim($the_ip[0]);
	}
	$result[] = filter_var( $_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 );

	if(isset($_GET['sfw_test_ip']))
	{
		$result[]=$_GET['sfw_test_ip'];
	}
	return $result;
}


$form->add( new \IPS\Helpers\Form\YesNo( 'plugin_enabled', \IPS\Settings::i()->plugin_enabled, FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'plugin_enabled' ) ) );
$form->add( new \IPS\Helpers\Form\YesNo( 'moderate_new', \IPS\Settings::i()->moderate_new, FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'moderate_new' ) ) );
$form->add( new \IPS\Helpers\Form\YesNo( 'show_link', \IPS\Settings::i()->show_link, FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'show_link' ) ) );
if(file_exists(dirname($_SERVER['SCRIPT_FILENAME'])."/../uploads/cleantalk-sfw.class.php"))
{
	$form->add( new \IPS\Helpers\Form\YesNo( 'cleantalk_sfw', \IPS\Settings::i()->cleantalk_sfw, FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'cleantalk_sfw' ) ) );
}
else
{
	$form->addHeader('Please, delete plugin completely and install again to enable Spam FireWall feature');
}
$form->add( new \IPS\Helpers\Form\Text( 'access_key', \IPS\Settings::i()->access_key, FALSE, array( 'app' => 'core', 'key' => 'Admin', 'autoSaveKey' => 'access_key' ) ) );

if ( $values = $form->values() )
{
	require_once(dirname($_SERVER['SCRIPT_FILENAME'])."/../uploads/cleantalk.class.php");
	require_once(dirname($_SERVER['SCRIPT_FILENAME'])."/../uploads/JSON.php");
	$values = $form->values();
	
	$ct = new \Cleantalk();
	$ct->work_url = 'http://moderate.cleantalk.ru';
    $ct->server_url = 'http://moderate.cleantalk.ru';
    $ct->server_ttl = 43200;
	
	$ct_request = new \CleantalkRequest();
    $ct_request->auth_key = $values['access_key'];
	$ct_request->sender_nickname = 'CleanTalk';
    $ct_request->sender_ip = $_SERVER['REMOTE_ADDR'];
    $ct_request->sender_email = 'good@cleantalk.org';
    $ct_request->agent = 'ipboard4-181';
    $ct_request->js_on = 1;
    $ct_request->message = 'This message is a test to check the connection to the CleanTalk servers.';

    $ct_result = $ct->isAllowMessage($ct_request);
	
	$form->saveAsSettings();
	if(\IPS\Settings::i()->cleantalk_sfw == 1)
	{
    	$sql="DROP TABLE IF EXISTS `cleantalk_sfw`";
		$result = IPS\Db::i()->query($sql);
		$sql="CREATE TABLE IF NOT EXISTS `cleantalk_sfw` (
`network` int(11) unsigned NOT NULL,
`mask` int(11) unsigned NOT NULL,
INDEX (  `network` ,  `mask` )
) ENGINE = MYISAM ";
		$result = IPS\Db::i()->query($sql);
		$data = Array(	'auth_key' => $values['access_key'],
				'method_name' => '2s_blacklists_db'
			);
			
		$result=sendRawRequest('https://api.cleantalk.org/2.1',$data,false);
		$result=json_decode($result, true);
		if(isset($result['data']))
		{
			$result=$result['data'];
			$query="INSERT INTO `cleantalk_sfw` VALUES ";
			for($i=0;$i<sizeof($result);$i++)
			{
				if($i==sizeof($result)-1)
				{
					$query.="(".$result[$i][0].",".$result[$i][1].")";
				}
				else
				{
					$query.="(".$result[$i][0].",".$result[$i][1]."), ";
				}
			}
			$result = IPS\Db::i()->query($query);
		}
	}
	return TRUE;
}

return $form;]]></settingsCode><tasks/><widgets/><htmlFiles/><cssFiles/><jsFiles/><resourcesFiles/><lang><word key="plugin_enabled" js="0">Enable CleanTalk</word><word key="moderate_new" js="0">Moderate new users posts</word><word key="access_key" js="0">Access key</word><word key="show_link" js="0">Show link to CleanTalk</word><word key="cleantalk_sfw" js="0">Enable SpamFireWall</word></lang><versions><version long="10000" human="1.7.0"><![CDATA[//<?php


/* To prevent PHP errors (extending class does not exist) revealing path */
if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) )
{
	header( ( isset( $_SERVER['SERVER_PROTOCOL'] ) ? $_SERVER['SERVER_PROTOCOL'] : 'HTTP/1.0' ) . ' 403 Forbidden' );
	exit;
}

/**
 * Install Code
 */
class ips_plugins_setup_install
{
	/**
	 * ...
	 *
	 * @return	array	If returns TRUE, upgrader will proceed to next step. If it returns any other value, it will set this as the value of the 'extra' GET parameter and rerun this step (useful for loops)
	 */
	public function step1()
	{
		$file = file_get_contents('https://raw.githubusercontent.com/CleanTalk/php-antispam/master/cleantalk.class.php');
		if($file === FALSE)
		{
	    	return FALSE;
		}
		if(file_put_contents(dirname($_SERVER['SCRIPT_FILENAME'])."/../uploads/cleantalk.class.php" , $file) === FALSE)
		{
		    return FALSE;
		}
		
		$file = file_get_contents('https://raw.githubusercontent.com/CleanTalk/php-antispam/master/JSON.php');
		if($file === FALSE)
		{
	    	return FALSE;
		}
		if(file_put_contents(dirname($_SERVER['SCRIPT_FILENAME'])."/../uploads/JSON.php" , $file) === FALSE)
		{
		    return FALSE;
		}
		
		$file = file_get_contents('https://raw.githubusercontent.com/CleanTalk/ips4-antispam/master/cleantalk-sfw.class.php');
		if($file === FALSE)
		{
	    	return FALSE;
		}
		if(file_put_contents(dirname($_SERVER['SCRIPT_FILENAME'])."/../uploads/cleantalk-sfw.class.php" , $file) === FALSE)
		{
		    return FALSE;
		}
		
		$file = file_get_contents('https://raw.githubusercontent.com/CleanTalk/ips4-antispam/master/sfw_die_page.html');
		if($file === FALSE)
		{
	    	return FALSE;
		}
		if(file_put_contents(dirname($_SERVER['SCRIPT_FILENAME'])."/../uploads/sfw_die_page.html" , $file) === FALSE)
		{
		    return FALSE;
		}
		
		
		\IPS\Db::i()->query( "CREATE TABLE IF NOT EXISTS cleantalk_timelabels (ct_key varchar(50), ct_value int(11), PRIMARY KEY (ct_key) ) ENGINE=myisam" );
	    \IPS\Db::i()->query( "CREATE TABLE IF NOT EXISTS cleantalk_server (work_url varchar(50), server_ttl int(11), server_changed int(11) ) ENGINE=myisam" );
	    \IPS\Db::i()->query( "CREATE TABLE IF NOT EXISTS cleantalk_settings (ct_key varchar(50), ct_value varchar(50), PRIMARY KEY (ct_key) ) ENGINE=myisam" );

		return TRUE;
	}
	
	// You can create as many additional methods (step2, step3, etc.) as is necessary.
	// Each step will be executed in a new HTTP request
}]]></version></versions></plugin>
